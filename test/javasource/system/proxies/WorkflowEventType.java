// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package system.proxies;

/**
 * The type of the event that occurred on the workflow. The event can relate to just the workflow or to a workflow activity.
 */
public enum WorkflowEventType
{
	WorkflowCompleted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Completed" } }),
	WorkflowInitiated(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Initiated" } }),
	WorkflowRestarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Restarted" } }),
	WorkflowFailed(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Failed" } }),
	WorkflowAborted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Aborted" } }),
	WorkflowPaused(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Paused" } }),
	WorkflowUnpaused(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Unpaused" } }),
	WorkflowRetried(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Retried" } }),
	WorkflowUpdated(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Updated" } }),
	WorkflowUpgraded(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Upgraded" } }),
	WorkflowConflicted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Conflicted" } }),
	WorkflowResolved(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Resolved" } }),
	WorkflowJumpToOptionApplied(new java.lang.String[][] { new java.lang.String[] { "en_US", "Workflow Jump-To Option Applied" } }),
	StartEventExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Start Event Executed" } }),
	EndEventExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "End Event Executed" } }),
	DecisionExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Decision Executed" } }),
	JumpExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Jump Executed" } }),
	ParallelSplitExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Parallel Split Executed" } }),
	ParallelMergeExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Parallel Merge Executed" } }),
	CallWorkflowStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Call Workflow Started" } }),
	CallWorkflowEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "Call Workflow Ended" } }),
	CallMicroflowStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Call Microflow Started" } }),
	CallMicroflowEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "Call Microflow Ended" } }),
	WaitForNotificationStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Wait for Notification Started" } }),
	WaitForNotificationEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "Wait for Notification Ended" } }),
	WaitForTimerStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Timer Started" } }),
	WaitForTimerEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "Timer Ended" } }),
	UserTaskStarted(new java.lang.String[][] { new java.lang.String[] { "en_US", "User Task Started" } }),
	MultiUserTaskOutcomeSelected(new java.lang.String[][] { new java.lang.String[] { "en_US", "Multi-User Task Outcome Selected" } }),
	UserTaskEnded(new java.lang.String[][] { new java.lang.String[] { "en_US", "User Task Ended" } }),
	NonInterruptingTimerEventExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Non-Interrupting Timer Event Executed" } }),
	InterruptingTimerEventExecuted(new java.lang.String[][] { new java.lang.String[] { "en_US", "Interrupting Timer Event Executed" } });

	private final java.util.Map<java.lang.String, java.lang.String> captions;

	private WorkflowEventType(java.lang.String[][] captionStrings)
	{
		this.captions = new java.util.HashMap<>();
		for (java.lang.String[] captionString : captionStrings) {
			captions.put(captionString[0], captionString[1]);
		}
	}

	public java.lang.String getCaption(java.lang.String languageCode)
	{
		return captions.getOrDefault(languageCode, "en_US");
	}

	public java.lang.String getCaption()
	{
		return captions.get("en_US");
	}
}
